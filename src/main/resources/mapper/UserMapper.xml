<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.todolist_test2.demo.mbg.mapper.UserMapper">
  <resultMap id="BaseResultMap" type="com.todolist_test2.demo.mbg.model.User">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="nickname" jdbcType="VARCHAR" property="nickname" />
    <result column="sex" jdbcType="TINYINT" property="sex" />
    <result column="mobile" jdbcType="VARCHAR" property="mobile" />
    <result column="qq" jdbcType="VARCHAR" property="qq" />
    <result column="wexin" jdbcType="VARCHAR" property="wexin" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="head_icon" jdbcType="VARCHAR" property="headIcon" />
    <result column="bg_image" jdbcType="VARCHAR" property="bgImage" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="last_login_time" jdbcType="TIMESTAMP" property="lastLoginTime" />
    <result column="enabled" jdbcType="TINYINT" property="enabled" />
    <result column="account_non_expired" jdbcType="TINYINT" property="accountNonExpired" />
    <result column="account_non_locked" jdbcType="TINYINT" property="accountNonLocked" />
    <result column="credentials_non_expired" jdbcType="TINYINT" property="credentialsNonExpired" />
    <result column="token" jdbcType="VARCHAR" property="token" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, username, password, nickname, sex, mobile, qq, wexin, email, head_icon, bg_image, 
    create_time, update_time, last_login_time, enabled, account_non_expired, account_non_locked, 
    credentials_non_expired, token
  </sql>
  <select id="selectByExample" parameterType="com.todolist_test2.demo.mbg.model.UserExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from s_user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from s_user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from s_user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.todolist_test2.demo.mbg.model.UserExample">
    delete from s_user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.todolist_test2.demo.mbg.model.User">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into s_user (username, password, nickname, 
      sex, mobile, qq, wexin, 
      email, head_icon, bg_image, 
      create_time, update_time, last_login_time, 
      enabled, account_non_expired, account_non_locked, 
      credentials_non_expired, token)
    values (#{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{nickname,jdbcType=VARCHAR}, 
      #{sex,jdbcType=TINYINT}, #{mobile,jdbcType=VARCHAR}, #{qq,jdbcType=VARCHAR}, #{wexin,jdbcType=VARCHAR}, 
      #{email,jdbcType=VARCHAR}, #{headIcon,jdbcType=VARCHAR}, #{bgImage,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{lastLoginTime,jdbcType=TIMESTAMP}, 
      #{enabled,jdbcType=TINYINT}, #{accountNonExpired,jdbcType=TINYINT}, #{accountNonLocked,jdbcType=TINYINT}, 
      #{credentialsNonExpired,jdbcType=TINYINT}, #{token,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.todolist_test2.demo.mbg.model.User">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into s_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="username != null">
        username,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="nickname != null">
        nickname,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="mobile != null">
        mobile,
      </if>
      <if test="qq != null">
        qq,
      </if>
      <if test="wexin != null">
        wexin,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="headIcon != null">
        head_icon,
      </if>
      <if test="bgImage != null">
        bg_image,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="lastLoginTime != null">
        last_login_time,
      </if>
      <if test="enabled != null">
        enabled,
      </if>
      <if test="accountNonExpired != null">
        account_non_expired,
      </if>
      <if test="accountNonLocked != null">
        account_non_locked,
      </if>
      <if test="credentialsNonExpired != null">
        credentials_non_expired,
      </if>
      <if test="token != null">
        token,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null">
        #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=TINYINT},
      </if>
      <if test="mobile != null">
        #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="qq != null">
        #{qq,jdbcType=VARCHAR},
      </if>
      <if test="wexin != null">
        #{wexin,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="headIcon != null">
        #{headIcon,jdbcType=VARCHAR},
      </if>
      <if test="bgImage != null">
        #{bgImage,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastLoginTime != null">
        #{lastLoginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="enabled != null">
        #{enabled,jdbcType=TINYINT},
      </if>
      <if test="accountNonExpired != null">
        #{accountNonExpired,jdbcType=TINYINT},
      </if>
      <if test="accountNonLocked != null">
        #{accountNonLocked,jdbcType=TINYINT},
      </if>
      <if test="credentialsNonExpired != null">
        #{credentialsNonExpired,jdbcType=TINYINT},
      </if>
      <if test="token != null">
        #{token,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.todolist_test2.demo.mbg.model.UserExample" resultType="java.lang.Long">
    select count(*) from s_user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update s_user
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.username != null">
        username = #{record.username,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null">
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.nickname != null">
        nickname = #{record.nickname,jdbcType=VARCHAR},
      </if>
      <if test="record.sex != null">
        sex = #{record.sex,jdbcType=TINYINT},
      </if>
      <if test="record.mobile != null">
        mobile = #{record.mobile,jdbcType=VARCHAR},
      </if>
      <if test="record.qq != null">
        qq = #{record.qq,jdbcType=VARCHAR},
      </if>
      <if test="record.wexin != null">
        wexin = #{record.wexin,jdbcType=VARCHAR},
      </if>
      <if test="record.email != null">
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.headIcon != null">
        head_icon = #{record.headIcon,jdbcType=VARCHAR},
      </if>
      <if test="record.bgImage != null">
        bg_image = #{record.bgImage,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.lastLoginTime != null">
        last_login_time = #{record.lastLoginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.enabled != null">
        enabled = #{record.enabled,jdbcType=TINYINT},
      </if>
      <if test="record.accountNonExpired != null">
        account_non_expired = #{record.accountNonExpired,jdbcType=TINYINT},
      </if>
      <if test="record.accountNonLocked != null">
        account_non_locked = #{record.accountNonLocked,jdbcType=TINYINT},
      </if>
      <if test="record.credentialsNonExpired != null">
        credentials_non_expired = #{record.credentialsNonExpired,jdbcType=TINYINT},
      </if>
      <if test="record.token != null">
        token = #{record.token,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update s_user
    set id = #{record.id,jdbcType=INTEGER},
      username = #{record.username,jdbcType=VARCHAR},
      password = #{record.password,jdbcType=VARCHAR},
      nickname = #{record.nickname,jdbcType=VARCHAR},
      sex = #{record.sex,jdbcType=TINYINT},
      mobile = #{record.mobile,jdbcType=VARCHAR},
      qq = #{record.qq,jdbcType=VARCHAR},
      wexin = #{record.wexin,jdbcType=VARCHAR},
      email = #{record.email,jdbcType=VARCHAR},
      head_icon = #{record.headIcon,jdbcType=VARCHAR},
      bg_image = #{record.bgImage,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      last_login_time = #{record.lastLoginTime,jdbcType=TIMESTAMP},
      enabled = #{record.enabled,jdbcType=TINYINT},
      account_non_expired = #{record.accountNonExpired,jdbcType=TINYINT},
      account_non_locked = #{record.accountNonLocked,jdbcType=TINYINT},
      credentials_non_expired = #{record.credentialsNonExpired,jdbcType=TINYINT},
      token = #{record.token,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.todolist_test2.demo.mbg.model.User">
    update s_user
    <set>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null">
        nickname = #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=TINYINT},
      </if>
      <if test="mobile != null">
        mobile = #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="qq != null">
        qq = #{qq,jdbcType=VARCHAR},
      </if>
      <if test="wexin != null">
        wexin = #{wexin,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="headIcon != null">
        head_icon = #{headIcon,jdbcType=VARCHAR},
      </if>
      <if test="bgImage != null">
        bg_image = #{bgImage,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastLoginTime != null">
        last_login_time = #{lastLoginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="enabled != null">
        enabled = #{enabled,jdbcType=TINYINT},
      </if>
      <if test="accountNonExpired != null">
        account_non_expired = #{accountNonExpired,jdbcType=TINYINT},
      </if>
      <if test="accountNonLocked != null">
        account_non_locked = #{accountNonLocked,jdbcType=TINYINT},
      </if>
      <if test="credentialsNonExpired != null">
        credentials_non_expired = #{credentialsNonExpired,jdbcType=TINYINT},
      </if>
      <if test="token != null">
        token = #{token,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.todolist_test2.demo.mbg.model.User">
    update s_user
    set username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      nickname = #{nickname,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=TINYINT},
      mobile = #{mobile,jdbcType=VARCHAR},
      qq = #{qq,jdbcType=VARCHAR},
      wexin = #{wexin,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      head_icon = #{headIcon,jdbcType=VARCHAR},
      bg_image = #{bgImage,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      last_login_time = #{lastLoginTime,jdbcType=TIMESTAMP},
      enabled = #{enabled,jdbcType=TINYINT},
      account_non_expired = #{accountNonExpired,jdbcType=TINYINT},
      account_non_locked = #{accountNonLocked,jdbcType=TINYINT},
      credentials_non_expired = #{credentialsNonExpired,jdbcType=TINYINT},
      token = #{token,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>